#!/usr/bin/env lua

-- ATTEN: this file is not a module
package.path = '/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;' .. package.path

require 'posix'
require 'lglib'
require 'bamboo'

local errors = require 'bamboo.errors'
local redis = require 'bamboo.redis'

------------------------------------------------------------------------
--- Global variables delarations: in top project code, we can see these variables
-- two important global variables
_G['web'] = nil
_G['req'] = nil

USERDEFINED_VIEWS = 'views/'
local DEFAULT_ALLOWED_METHODS = {GET = true, POST = true, PUT = true, JSON = true, XML = true}

------------------------------------------------------------------------
local istesting = false
-- APP_DIR: application directory, default is './', because we start it in application directory
local APP_DIR = './'
if arg[1]:startsWith('tests/') then
	istesting = true
else
	APP_DIR = arg[1] or './'
end
-- arg[2]: target file, every process handle one entry file, arg[2] is that file, default is 'handler_entry.lua'
local handler_file = arg[2] or 'app/handler_entry.lua'

-- settings.lua is the configuration file of one app, it sets at APP_DIR/settings.lua
local CONFIG_FILE = APP_DIR + "settings.lua"
local PROCESS_DIR = posix.getcwd()
-- the full directory of one application
local PROJECT_DIR = PROCESS_DIR + '/' + APP_DIR
-- add the project's direcotry to the lua searching path, to simplify the calling relation
package.path = package.path + (";%s/?.lua;%s/?/init.lua;"):format(PROJECT_DIR, PROJECT_DIR)
------------------------------------------------------------------------


local function updateConfig(config, config_file)
	setfenv(assert(loadfile(config_file)), config)()

	return config
end

local config = updateConfig({}, CONFIG_FILE)
assert(config.monserver_dir, 'Mongrel2 directory "monserver_dir" must be specified.')

local DB_HOST = config.DB_HOST or '127.0.0.1'
local DB_PORT = config.DB_PORT or 6379
local WHICH_DB = config.WHICH_DB or 0

-- create a redis connection in this process
-- we will create one redis connection for every process
BAMBOO_DB = redis.connect {host=DB_HOST, port=DB_PORT, which = WHICH_DB}



local Web = require 'bamboo.web'
local Session = require 'bamboo.session'
local User = require 'bamboo.models.user'

------------------------------------------------------------------------
-- URLS combination
local childenv = {}
-- load file handler_xxx.lua, make its environment as childenv, extract global variables in handler_xxx.lua to childenv
setfenv(assert(loadfile(handler_file)), setmetatable(childenv, {__index=_G}))()

table.update(bamboo.URLS, childenv.URLS)
local URLS = bamboo.URLS


------------------------------------------------------------------------
-- check the structure legality
local function checkURLS(urls)
	assert(not isFalse(urls[1]), '[ERROR] URLS value is not right. URLS[1] must be string and NOT be blank.')
	local router = urls[1]
	urls[1] = nil
	
	for k, v in pairs(urls) do
		checkType(k, 'string')
		if type(v) == 'table' then
			checkType(v[1], v[2], 'function', 'boolean')
		else
			checkType(v, 'function')
		end
	end

	return router
end
local router = checkURLS(URLS)


local function trailingPath(path)
	local path = path:gsub('//+', '/')
	if path:sub(-1) ~= '/' then
		path = ('%s/'):format(path)
	end
	
	return path
end

-- urls processing work
local function makeUrlHandlerMapping(URLS)
	local table_concrete = {}
	local table_pattern = {}
	
	local base = router
	for k, v in pairs(URLS) do
		local url_t = base + k
		-- remove abundant '/'
		url_t = trailingPath(url_t)
		
		-- separate the pattern format from normal concrete format
		if url_t:find('%[?%%[%%%-_a-zA-Z]+%]?%+?') then
			table_pattern[url_t:lower()] = v
		else
			table_concrete[url_t:lower()] = v
		end
	end	
	
	return table_concrete, table_pattern
end
local MappingTableConcrete, MappingTablePattern = makeUrlHandlerMapping(URLS)

print('-------------------- URL Settings --------------------')
ptable(MappingTableConcrete)
ptable(MappingTablePattern)
print('------------------------------------------------------')

------------------------------------------------------------------------
-- find handler function by path
-- @param path:	coming path
-- @return:  two values, first is a handler function, second is a boolean to indict whether is state programming
------------------------------------------------------------------------
local function getHandlerByPath(path)
	local path = path:lower() 
	local parse = function (v)
		if type(v) == 'table' then
			checkType(v[1], v[2], 'function', 'boolean')
			return v[1], v[2]
		elseif type(v) == 'function' then
			return v, false
		end
	end
	
	local key, value = "", nil
	
	-- process concrete case first
	if MappingTableConcrete[path] then return parse(MappingTableConcrete[path]) end

	-- if process the pattern case
	for k, v in pairs(MappingTablePattern) do
		-- for pattern cases, we select the concretest one
		if k == path then
			return parse(v)
		-- if some pattern cases meet one path meanwhile, and they have the save length, select the last one
		elseif path:match('^' + k + '$') then
			if key == '' or #k >= #key then 
				key, value = k, v
			end
		end

	end	

	-- if walks here, means this is a pattern case path
	if key and value then
		return parse(value)
	end
	
	-- if walks here, means no suited case matched
	return nil, nil
end


-- local function createStateRecorder(STATE, mapt)
--	for k, _ in pairs(mapt) do
--		STATE[k] = {}
--	end
--	return STATE
-- end

-- STATE是一个二组数组。第一维是path，即URL PATH部分，第二维是conn_id
-- local STATE = createStateRecorder(setmetatable({}, {__mode="k"}), MappingTableConcrete)






------------------------------------------------------------------------
-- execute passed in function
-- @param state:  	web object
-- @param req:		request object
-- @param before:	before function
-- @param after:	after function
-- @param action_func:	  action function
-- @return true|false 
------------------------------------------------------------------------
local function execState(state, req, before, after, action_func)
    local good, err

	if before then
        good, err = pcall(before, state, req)
        if not good then return good, err end
        if not err then return false end
    end
	
    good, err = action_func(state, req)
   
    if after then
        local after_good, after_err = pcall(after, state, req)
        if not after_good then return after_good, after_err end
        if not after_err then return false end
    end

    return good, err
end

------------------------------------------------------------------------
-- 状态编程。状态编程的控制函数。
-- @param main		由上层开发人员写的handler的主函数
-- @param conn  	连接对象
-- @param req	请求对象
-- @param conn_id	连接id（是cookie唯一编号吗？）
-- @param before	执行对象操作函数前的处理函数，由外部传入
-- @param after		执行对象操作函数后的处理函数，由外部传入
-- @return 无
------------------------------------------------------------------------
--[[
local function runCoro(conn, main, req, conn_id, path, before, after)
    -- 进入这个函数，意味着客户端发送了一个数据过来
	-- 从状态机中获得一个状态
    local state = STATE and STATE[path] and STATE[path][conn_id]
    local good, err

    -- 如果客户端是第一次发送数据过来，那么新创建一个状态（在这个状态中创建了一个协程）
    if not state then
		-- 创建一个Web对象实例，命名为state
        state = Web(conn, main, req, true)
		_G['web'] = state
        -- 在状态机中记录下这个对象实例，以连接编码为key
		STATE[path] = {}
		STATE[path][conn_id] = state
        good, err = execState(state, req, before, after,
            function (s, r)
                return coroutine.resume(state.controller, state, req) 
            end)
    -- 如果客户端不是第一次发送数据过来，就直接唤醒
	else
        state.req = req

        good, err = execState(state, req, before, after,
            function (s, r)
                return coroutine.resume(s.controller, r) 
            end)
    end

	-- 如果在执行的过程中出现了错误，就通过返回错误页面报错
    if not good and err then
        errors.reportError(conn, req, err, state)
    end

    -- 如果主函数已经完成或执行过程中出了错误，那么结束对客户端连接的跟踪
    if not good or coroutine.status(state.controller) == "dead" then
        -- 将客户端从状态集中清除即是
		STATE[path][conn_id] = nil
		STATE[path] = nil
    end
end
--]]


------------------------------------------------------------------------
-- stateless programming
-- @param conn:		connection object
-- @param main:		application main function
-- @param req:		request object
-- @param before:	before function
-- @param after:	after function
-- @return: none
------------------------------------------------------------------------
local function runStateless(conn, main, req, before, after)
    local state = Web(conn, main, req, false)
	-- update the latest web state to global variale web
	_G['web'] = state
	
    local good, err = execState(state, req, before, after, function(s,r)
        return pcall(s.controller, s, r)
    end)

    if not good and err then
        errors.reportError(conn, req, err, state)
    end
end


------------------------------------------------------------------------
-- Bamboo's main loop for every bamboo process
-- @param conn:	 	connection object
-- @param config:	config table from external
-- @return:			none
------------------------------------------------------------------------
local function run(conn, config)
    local main, ident, disconnect = config.main, config.ident, config.disconnect
    local before, after = config.before, config.after
    local good, err
    local req, msg_type, controller
    local conn_id, path
--	local PREV_PATH = {}
	
    -- main loop
	while true do
        -- Get a message from the Mongrel2 server, if have no, block to wait
        req, err = conn:recv()
		-- update the latest request object to global request reference
		_G['req'] = req

        if req and not err then
			-- if http directive is not in the range of bamboo specified 
            if not config.methods[req.headers.METHOD] then
                basicError(conn, req, "Method Not Allowed",
                    405, "Method Not Allowed", {Allow = config.allowed_methods_header})
            else
                msg_type = req.data.type
				
				-- if client close the connection
                if msg_type == 'disconnect' then
                    if disconnect then disconnect(req) end
                    print("DISCONNECT", req.conn_id)
                else
					-- here generate connection id, that is cookie identifier, and also session id
                    conn_id = ident(req)
					-- normalize the path's format
					path = trailingPath(req.path)

					req.METHOD = req.headers.METHOD
					req.path = path
					if req.headers['x-requested-with'] == 'XMLHttpRequest' then
						req['ajax'] = true
					end

					print(("req %s: %s"):format(config.route, req.conn_id), os.date(), req.path, req.METHOD, req.session_id)
					
					-- record session
					Session:set(req)
					
					--local prev_path = PREV_PATH[session_id]
					--if prev_path and prev_path ~= req.path and STATE[prev_path] and STATE[prev_path][session_id] then
					--	if not STATE[prev_path] then STATE[prev_path] = {} end
					--	STATE[prev_path][session_id] = nil
					--else
					--	PREV_PATH[session_id] = req.path
					--end
					--ptable(BAMBOO_DB:hgetall('session:'+req.session_id))	-- for test

					-------------------------------------------------
					-- according coming path, find the corresponding handler function
					local main, state_flag = getHandlerByPath(path)
					if not main then
					   	-- return 404 page
						print(('[WARNING] No handler to process this path: %s.'):format(path))
						conn:reply_http(req, '<h2>Page Not Found.</h2>', 404, 'Not Found', req.headers)
					else
						
						if state_flag then
						   -- temporarily disable it
						   --runCoro(conn, main, req, conn_id, path, before, after)
						else
							-- this is the default way
							runStateless(conn, main, req, before, after)
						end
					end

                end
            end
		else
            print("FATAL ERROR", good, req, err)
        end
    end
end

local m2 = require 'bamboo.m2'

local function collectConfig(config)

	-- config can be from three places:
	-- 1. application settings.lua
	-- 2. default values bamboo defined
	-- 3. mognrel2's config sqlite3 file
	local config = config or {}
	config.APP_DIR = APP_DIR
	-- bamboo app and mongrel2's interface
	config.route = router
	config.MappingTableConcrete = MappingTableConcrete
	config.MappingTablePattern = MappingTablePattern
	
    -- templates' directory
	config.templates = config.templates or (APP_DIR + USERDEFINED_VIEWS)
	config.views = config.views or config.templates
	USERDEFINED_VIEWS = config.views
	
    -- identifier generator, user can define their own
	config.ident = config.ident or Session.identRequest
    -- HTTP directive white list, user can define their own
    config.methods = config.methods or DEFAULT_ALLOWED_METHODS

    local allowed = {}
    for m, yes in pairs(config.methods) do
        if yes then allowed[#allowed + 1] = m end
    end
    -- make allowed_methods_header
	config.allowed_methods_header = table.concat(allowed, ' ')
	
	if config.monserver_dir then
		-- format full directory of config_db, to find mongrel2's configuration in that sqlite3 db file
		config.config_db = config.monserver_dir + '/' + config.config_db
	end

	return config
end


------------------------------------------------------------------------
-- Bamboo start interface
-- @param config:	configuration table from application
-- @return:			none
------------------------------------------------------------------------
local function start(config)
	-- load sqlite3 configuration, update to config table
    m2.loadConfig(config)
	-- make a connection as the pipe interact with mongrel2
    local conn = assert(m2.connect(config), "Failed to connect to Mongrel2.")

    -- boot main loop
    run(conn, config)
end

collectConfig(config)
bamboo.EXPORT_FOR_TESTING = {
	config = config,
	run = run,
	updateConfig = updateConfig,
	DEFAULT_ALLOWED_METHODS = DEFAULT_ALLOWED_METHODS,
	ident = Session.identRequest,
	parseSessionId = Session.parseSessionId,
--	getState = getState,
}


------------------------------------------------------------
-- START BAMBOO
------------------------------------------------------------
-- normal case
if not istesting then
   start(config)
end
   